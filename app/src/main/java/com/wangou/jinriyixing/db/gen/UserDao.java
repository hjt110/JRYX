package com.wangou.jinriyixing.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wangou.jinriyixing.db.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property Headpic = new Property(4, String.class, "headpic", false, "HEADPIC");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
        public final static Property Signature = new Property(6, String.class, "signature", false, "SIGNATURE");
        public final static Property Birthday_time = new Property(7, String.class, "birthday_time", false, "BIRTHDAY_TIME");
        public final static Property Birthday_date = new Property(8, String.class, "birthday_date", false, "BIRTHDAY_DATE");
        public final static Property Province = new Property(9, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(10, String.class, "city", false, "CITY");
        public final static Property Town = new Property(11, String.class, "town", false, "TOWN");
        public final static Property Dynamicnum = new Property(12, String.class, "dynamicnum", false, "DYNAMICNUM");
        public final static Property Follownum = new Property(13, String.class, "follownum", false, "FOLLOWNUM");
        public final static Property Fansnum = new Property(14, String.class, "fansnum", false, "FANSNUM");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TOKEN\" TEXT," + // 1: token
                "\"USERNAME\" TEXT," + // 2: username
                "\"SEX\" TEXT," + // 3: sex
                "\"HEADPIC\" TEXT," + // 4: headpic
                "\"MOBILE\" TEXT," + // 5: mobile
                "\"SIGNATURE\" TEXT," + // 6: signature
                "\"BIRTHDAY_TIME\" TEXT," + // 7: birthday_time
                "\"BIRTHDAY_DATE\" TEXT," + // 8: birthday_date
                "\"PROVINCE\" TEXT," + // 9: province
                "\"CITY\" TEXT," + // 10: city
                "\"TOWN\" TEXT," + // 11: town
                "\"DYNAMICNUM\" TEXT," + // 12: dynamicnum
                "\"FOLLOWNUM\" TEXT," + // 13: follownum
                "\"FANSNUM\" TEXT);"); // 14: fansnum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String headpic = entity.getHeadpic();
        if (headpic != null) {
            stmt.bindString(5, headpic);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(7, signature);
        }
 
        String birthday_time = entity.getBirthday_time();
        if (birthday_time != null) {
            stmt.bindString(8, birthday_time);
        }
 
        String birthday_date = entity.getBirthday_date();
        if (birthday_date != null) {
            stmt.bindString(9, birthday_date);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(10, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(11, city);
        }
 
        String town = entity.getTown();
        if (town != null) {
            stmt.bindString(12, town);
        }
 
        String dynamicnum = entity.getDynamicnum();
        if (dynamicnum != null) {
            stmt.bindString(13, dynamicnum);
        }
 
        String follownum = entity.getFollownum();
        if (follownum != null) {
            stmt.bindString(14, follownum);
        }
 
        String fansnum = entity.getFansnum();
        if (fansnum != null) {
            stmt.bindString(15, fansnum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String headpic = entity.getHeadpic();
        if (headpic != null) {
            stmt.bindString(5, headpic);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(7, signature);
        }
 
        String birthday_time = entity.getBirthday_time();
        if (birthday_time != null) {
            stmt.bindString(8, birthday_time);
        }
 
        String birthday_date = entity.getBirthday_date();
        if (birthday_date != null) {
            stmt.bindString(9, birthday_date);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(10, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(11, city);
        }
 
        String town = entity.getTown();
        if (town != null) {
            stmt.bindString(12, town);
        }
 
        String dynamicnum = entity.getDynamicnum();
        if (dynamicnum != null) {
            stmt.bindString(13, dynamicnum);
        }
 
        String follownum = entity.getFollownum();
        if (follownum != null) {
            stmt.bindString(14, follownum);
        }
 
        String fansnum = entity.getFansnum();
        if (fansnum != null) {
            stmt.bindString(15, fansnum);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headpic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // signature
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthday_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // birthday_date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // province
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // city
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // town
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dynamicnum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // follownum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // fansnum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadpic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSignature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthday_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBirthday_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProvince(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTown(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDynamicnum(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFollownum(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFansnum(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
